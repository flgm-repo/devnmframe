<?xml version="1.0" encoding="utf-8"?>
<!--
/**
 *  Latest information on this project can be found at http://www.rogue-development.com/objectHandles.html
 * 
 *  Copyright (c) 2009 Marc Hughes 
 * 
 *  Permission is hereby granted, free of charge, to any person obtaining a 
 *  copy of this software and associated documentation files (the "Software"), 
 *  to deal in the Software without restriction, including without limitation 
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 *  and/or sell copies of the Software, and to permit persons to whom the Software 
 *  is furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all 
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
 *  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
 *  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 *  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
 *  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 
 * 
 *  See README for more information.
 * 
 **/
-->

<!---
This is an example and not a part of the core ObjectHandles library.
-->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
				width="100%" height="100%" 
				xmlns:example="com.roguedevelopment.objecthandles.example.*"
				horizontalScrollPolicy="on"
				verticalScrollPolicy="on"
				backgroundColor="#FFFFFF" borderStyle="solid" borderColor="#000000" borderThickness="2"
				creationComplete="init()"
				click="if( event.target == this ) objectHandles.selectionManager.clearSelection();"
				>
		<mx:Script>
		<![CDATA[
			import com.roguedevelopment.objecthandles.HandleRoles;
			import com.roguedevelopment.objecthandles.HandleDescription;
			import com.roguedevelopment.objecthandles.constraints.MovementConstraint;
			import com.roguedevelopment.objecthandles.constraints.SizeConstraint;
			import com.roguedevelopment.objecthandles.SpriteHandle;
			import com.roguedevelopment.objecthandles.ObjectHandles;
			import mx.effects.Tween;
			import mx.effects.Move;
			import com.roguedevelopment.objecthandles.example.SimpleSpriteShape;
			import com.roguedevelopment.objecthandles.example.SimpleDataModel;
			import com.roguedevelopment.objecthandles.example.SimpleFlexShape;
			
			protected var objectHandles:ObjectHandles;
			
			[Bindable]
			public var bindedFlexModel: SimpleDataModel;
			
			public var flexModel : SimpleDataModel;
			public var simpleFlexShape : SimpleFlexShape;
						
			protected function init() : void
			{
				objectHandles = new ObjectHandles( this , null, new ClassFactory(DegrafaHandle));
				objectHandles.defaultHandles.push( new HandleDescription( HandleRoles.MOVE,
															new Point(50,50) ,
															new Point(0,0) ) );
				var xValue:uint = 50;
				
				for ( var i:int = 0; i < 5 ; i++)
				{
					simpleFlexShape = new SimpleFlexShape();
					simpleFlexShape.addEventListener(MouseEvent.CLICK, simpleFlexShapeClickedHandler );
					this.addChild(simpleFlexShape);
					
					flexModel = new SimpleDataModel();
					simpleFlexShape.model = flexModel;
					flexModel.x = xValue;
					flexModel.y = 150;
					flexModel.width = 50;
					flexModel.height = 50;
					objectHandles.registerComponent( flexModel, simpleFlexShape );
					xValue += 50;
				}

				//contraints is the limit of the given dimensions. 
				var constraint:SizeConstraint = new SizeConstraint();
				constraint.minWidth = 20;
				constraint.minHeight = 20;
				constraint.maxWidth = 500;
				constraint.maxHeight = 200;
				objectHandles.constraints.push( constraint );					
			}
			
			private function simpleFlexShapeClickedHandler(event:MouseEvent):void
			{
				var clickedSimpleFlexShape:SimpleFlexShape = event.currentTarget as SimpleFlexShape;
				bindedFlexModel = clickedSimpleFlexShape.model;
			}
			
			private function getAllDimensions():void
			{
				var allDimensions:String="";
				var simpleFlexShapeCount:int = 1;
				
				for ( var i:int = 0; i < this.getChildren().length ; i++ )
				{
					if ( this.getChildAt(i) is SimpleFlexShape )
					{
						var tempSimpleFlexShape: SimpleFlexShape = this.getChildAt(i) as SimpleFlexShape;
						allDimensions += "\n"+"SimpleFlexShape "+simpleFlexShapeCount.toString()+"\n";
						allDimensions += "SimpleFlexShape height: "+tempSimpleFlexShape.model.height+"\n";
						allDimensions += "SimpleFlexShape width: "+tempSimpleFlexShape.model.width+"\n";
						allDimensions += "SimpleFlexShape rotation: "+tempSimpleFlexShape.model.rotation+"\n";
						allDimensions += "SimpleFlexShape X: "+tempSimpleFlexShape.model.x+"\n";
						allDimensions += "SimpleFlexShape Y: "+tempSimpleFlexShape.model.y+"\n";
						simpleFlexShapeCount++;
					}
				}
				
				allDimensionsTextArea.text = allDimensions;	
			}
			
			private function setFirstImageBG():void
			{
				var allDimensions:String="";
				var simpleFlexShapeCount:int = 1;
				
				for ( var i:int = 0; i < this.getChildren().length ; i++ )
				{
					if ( this.getChildAt(i) is SimpleFlexShape )
					{
						if ( simpleFlexShapeCount == 1 )
						{
							var tempSimpleFlexShape: SimpleFlexShape = this.getChildAt(i) as SimpleFlexShape;
							tempSimpleFlexShape.loadAsBackground();
							//tempSimpleFlexShape.setStyle("backgroundImage", "assets/WebDesign03.png");
							simpleFlexShapeCount++;
							break;
						}
					}
				}
			}
			
			
		]]>
	</mx:Script>				
		<mx:Text selectable="false" text="Dynamically adding UIComponents with object handles." 
			fontFamily="Calibri" width="400" color="#000000" fontSize="14" fontWeight="normal" left="5" top="5" height="194"/>


		<mx:VBox width="50%" height="100%"  borderStyle="solid" borderColor="#000000" borderThickness="3" right="-2" top="-2" id="subCanvas">		
			<mx:Canvas >
					<mx:Form>
						<mx:FormItem label="Flex Model Height:: ">
							<mx:TextInput text="{bindedFlexModel.height}"/>
						</mx:FormItem>
						<mx:FormItem label="Flex Model Width:: ">
							<mx:TextInput text="{bindedFlexModel.width}"/>
						</mx:FormItem>
						<mx:FormItem label="Flex Model Rotation:: ">
							<mx:TextInput text="{bindedFlexModel.rotation}"/>
						</mx:FormItem>
						<mx:FormItem label="Flex Model X:: ">
							<mx:TextInput text="{bindedFlexModel.x}"/>
						</mx:FormItem>
						<mx:FormItem label="Flex Model Y:: ">
							<mx:TextInput text="{bindedFlexModel.y}"/>
						</mx:FormItem>
					</mx:Form>
			</mx:Canvas>
			
			<mx:TextArea id="allDimensionsTextArea" fontFamily="Calibri" fontSize="14" width="100%"  height="200"/>
			<mx:Button click="getAllDimensions();" label="Get All SimpleFlexShape Dimensions"/>
			<mx:Button click="setFirstImageBG();" label="Set First SimpleFlexShape BG"/>
		</mx:VBox>
</mx:Canvas>
